name: Run Gradle on PRs
on: pull_request
jobs:
    prBranch:
        strategy:
            matrix:
                os: [ubuntu-latest]
        runs-on: ${{ matrix.os }}
        steps:
            - uses: actions/checkout@v3
            - uses: actions/setup-java@v3
              with:
                  distribution: temurin
                  java-version: 11

            - name: Setup Gradle
              uses: gradle/gradle-build-action@v2
            - name: Execute Gradle build
              env:
                  GE_URL: ${{ secrets.GE_URL }}
                  GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}
              run: |
                curl -s "https://get.sdkman.io" | bash
                source "$HOME/.sdkman/bin/sdkman-init.sh"
                sdk install gradleprofiler 0.18.0
                echo $'assemble { \n title= "assemble" \n tasks = ["assembleDebug"] \n cleanup-tasks = ["clean"] \n gradle-args = ["-Dscan.tag.pr", "-Dscan.tag.experiment", "-Dscan.tag.${{github.run_number}}"] \n}' >scenario
                #gradle-profiler --benchmark --scenario-file scenario assemble

            - name: Archive production artifacts
              uses: actions/upload-artifact@v3
              with:
                  name: cache
                  path: /home/runner/.gradle/caches/transforms-3/9a864bdf6138f0a2c754a9e732c2644a/transformed/output

    mainBranch:
        strategy:
            matrix:
                os: [ubuntu-latest]
        runs-on: ${{ matrix.os }}
        steps:
            - uses: actions/checkout@v3
            - uses: actions/setup-java@v3
              with:
                  distribution: zulu
                  java-version: 11.0.4

            - name: Setup Gradle
              uses: gradle/gradle-build-action@v2
            - name: Execute Gradle build
              env:
                  GE_URL: ${{ secrets.GE_URL }}
                  GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}
              run: |
                  curl -s "https://get.sdkman.io" | bash
                  source "$HOME/.sdkman/bin/sdkman-init.sh"
                  sdk install gradleprofiler 0.18.0
                  echo $'assemble { \n title= "assemble" \n tasks = ["assembleDebug"] \n cleanup-tasks = ["clean"] \n gradle-args = ["-Dscan.tag.main" ,"-Dscan.tag.experiment", "-Dscan.tag.${{github.run_number}}"] \n}' >scenario
                  git fetch origin
                  git checkout main
                  #gradle-profiler --benchmark --scenario-file scenario assemble

            - name: Archive production artifacts
              uses: actions/upload-artifact@v3
              with:
                  name: cache1
                  path: /home/runner/.gradle/caches/transforms-3/bf1362543da86239151d00c56f0b4149/transformed/output

    geapi:
        strategy:
            matrix:
                os: [ubuntu-latest]
        runs-on: ${{ matrix.os }}
        needs: [ prBranch, mainBranch ]
        steps:
            - uses: actions/checkout@v3
            - uses: actions/setup-java@v3
              with:
                  distribution: zulu
                  java-version: 11.0.4

            - name: Setup Gradle
              uses: gradle/gradle-build-action@v2

            - name: Execute Gradle build
              id : geapix
              env:
                  GE_URL: ${{ secrets.GE_URL }}
                  GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}
                  GRADLE_API_KEY: ${{ secrets.TEST_SECRET }}
              run: |
                      mkdir geapi
                      cd geapi
                      echo "1"
                      git clone https://github.com/cdsap/GradleEnterpriseApiReports.git
                      echo "3"
                      cd GradleEnterpriseApiReports
                      echo "4"
                      git checkout experiment_draft
                      echo "5"
                      #./gradlew install
                      #geapi/build/install/geapi/bin/geapi --report=experiment --api-key=$GRADLE_API_KEY --url=$GE_URL --task=assembleDebug --max-builds=100 --project=TestUsingDifferentSourceProvider --tags=main --tags=experiment --tags=pr --tags=${{github.run_number}}> alo


                      #awk '/Processing build scan cache performance/ {p=1;next}; p==1 {print}' alo > alo2
                      #cat alo2
                      echo "12" > alo2
                      #echo "MESSAGE_DIFF='```$(cat alo2)```'" >> $GITHUB_ENV
            - uses: actions/github-script@v5
              with:
                  github-token: ${{secrets.GITHUB_TOKEN}}
                  script: |
                      github.rest.issues.createComment({
                        issue_number: context.issue.number,
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        body: 'ðŸ‘‹ $(cat alo2)!'
                      })
